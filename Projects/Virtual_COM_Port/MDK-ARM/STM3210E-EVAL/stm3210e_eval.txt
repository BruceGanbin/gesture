; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\stm3210e_eval.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\stm3210e_eval.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL\stm3210e_eval.c]
                          THUMB

                          AREA ||i.LM75_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_DeInit PROC
;;;597      */
;;;598    void LM75_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;599    {
;;;600      GPIO_InitTypeDef  GPIO_InitStructure;
;;;601    
;;;602      /*!< Disable LM75_I2C */
;;;603      I2C_Cmd(LM75_I2C, DISABLE);
000002  4c13              LDR      r4,|L1.80|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;604      /*!< DeInitializes the LM75_I2C */
;;;605      I2C_DeInit(LM75_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;606      
;;;607      /*!< LM75_I2C Periph clock disable */
;;;608      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;609        
;;;610      /*!< Configure LM75_I2C pins: SCL */
;;;611      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;612      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000022  2004              MOVS     r0,#4
;;;613      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000024  4c0b              LDR      r4,|L1.84|
000026  f88d0003          STRB     r0,[sp,#3]            ;612
00002a  4669              MOV      r1,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_Init
;;;614    
;;;615      /*!< Configure LM75_I2C pins: SDA */
;;;616      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000032  2080              MOVS     r0,#0x80
000034  f8ad0000          STRH     r0,[sp,#0]
;;;617      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;618    
;;;619      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;620      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;621      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;622    }
00004e  bd38              POP      {r3-r5,pc}
;;;623    
                          ENDP

                  |L1.80|
                          DCD      0x40005400
                  |L1.84|
                          DCD      0x40010c00

                          AREA ||i.LM75_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_Init PROC
;;;628      */
;;;629    void LM75_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;630    {
;;;631      GPIO_InitTypeDef  GPIO_InitStructure;
;;;632    
;;;633      /*!< LM75_I2C Periph clock enable */
;;;634      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;635        
;;;636      /*!< LM75_I2C_SCL_GPIO_CLK, LM75_I2C_SDA_GPIO_CLK 
;;;637           and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;638      RCC_APB2PeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
00000a  2101              MOVS     r1,#1
00000c  2008              MOVS     r0,#8
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;639                             LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;640      
;;;641      /*!< Configure LM75_I2C pins: SCL */
;;;642      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
000012  2040              MOVS     r0,#0x40
000014  f8ad0000          STRH     r0,[sp,#0]
;;;643      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;644      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
00001e  201c              MOVS     r0,#0x1c
;;;645      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000020  4c0c              LDR      r4,|L2.84|
000022  f88d0003          STRB     r0,[sp,#3]            ;644
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;646    
;;;647      /*!< Configure LM75_I2C pins: SDA */
;;;648      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0000          STRH     r0,[sp,#0]
;;;649      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_Init
;;;650    
;;;651      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;652      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
00003c  2020              MOVS     r0,#0x20
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;653      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000042  2048              MOVS     r0,#0x48
000044  f88d0003          STRB     r0,[sp,#3]
;;;654      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure); 
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;655    }
000050  bd38              POP      {r3-r5,pc}
;;;656    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40010c00

                          AREA ||i.SD_DMAEndOfTransferStatus||, CODE, READONLY, ALIGN=2

                  SD_DMAEndOfTransferStatus PROC
;;;513      */
;;;514    uint32_t SD_DMAEndOfTransferStatus(void)
000000  4801              LDR      r0,|L3.8|
;;;515    {
;;;516      return (uint32_t)DMA_GetFlagStatus(DMA2_FLAG_TC4);
000002  f7ffbffe          B.W      DMA_GetFlagStatus
;;;517    }
;;;518    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x10002000

                          AREA ||i.SD_LowLevel_DMA_RxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_RxConfig PROC
;;;479      */
;;;480    void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;481    {
000002  4605              MOV      r5,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
;;;482      DMA_InitTypeDef DMA_InitStructure;
;;;483    
;;;484      DMA_ClearFlag(SD_SDIO_DMA_FLAG_TC | SD_SDIO_DMA_FLAG_TE | SD_SDIO_DMA_FLAG_HT | SD_SDIO_DMA_FLAG_GL);
000008  4814              LDR      r0,|L4.92|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;485    
;;;486      /*!< SDIO DMA CHANNEL disable */
;;;487      DMA_Cmd(SD_SDIO_DMA_CHANNEL, DISABLE);
00000e  4e14              LDR      r6,|L4.96|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;488    
;;;489      /*!< SDIO DMA CHANNEL Config */
;;;490      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000018  4812              LDR      r0,|L4.100|
00001a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;491      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
;;;492      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
00001e  2000              MOVS     r0,#0
;;;493      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  08a1              LSRS     r1,r4,#2
000022  e9cd0102          STRD     r0,r1,[sp,#8]
;;;494      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;495      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000026  2180              MOVS     r1,#0x80
000028  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;496      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002c  0089              LSLS     r1,r1,#2
;;;497      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00002e  9106              STR      r1,[sp,#0x18]
000030  0089              LSLS     r1,r1,#2
000032  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;498      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;499      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000036  0089              LSLS     r1,r1,#2
000038  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;500      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;501      DMA_Init(SD_SDIO_DMA_CHANNEL, &DMA_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       DMA_Init
;;;502    
;;;503      DMA_ITConfig(SD_SDIO_DMA_CHANNEL, DMA_IT_TC, ENABLE);
000044  2201              MOVS     r2,#1
000046  2102              MOVS     r1,#2
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       DMA_ITConfig
;;;504    
;;;505      /*!< SDIO DMA CHANNEL enable */
;;;506      DMA_Cmd(SD_SDIO_DMA_CHANNEL, ENABLE);  
00004e  2101              MOVS     r1,#1
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       DMA_Cmd
;;;507    }
000056  b00c              ADD      sp,sp,#0x30
000058  bd70              POP      {r4-r6,pc}
;;;508    
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      0x1000f000
                  |L4.96|
                          DCD      0x40020444
                  |L4.100|
                          DCD      0x40018080

                          AREA ||i.SD_LowLevel_DMA_TxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_TxConfig PROC
;;;443      */
;;;444    void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;445    {
000002  4605              MOV      r5,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
;;;446    
;;;447      DMA_InitTypeDef DMA_InitStructure;
;;;448    
;;;449      DMA_ClearFlag(SD_SDIO_DMA_FLAG_TC | SD_SDIO_DMA_FLAG_TE | SD_SDIO_DMA_FLAG_HT | SD_SDIO_DMA_FLAG_GL);
000008  4814              LDR      r0,|L5.92|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;450    
;;;451      /*!< DMA2 Channel4 disable */
;;;452      DMA_Cmd(SD_SDIO_DMA_CHANNEL, DISABLE);
00000e  4e14              LDR      r6,|L5.96|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;453    
;;;454      /*!< SDIO DMA CHANNEL Config */
;;;455      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000018  4812              LDR      r0,|L5.100|
00001a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;456      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
;;;457      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
00001e  2010              MOVS     r0,#0x10
;;;458      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  9002              STR      r0,[sp,#8]
000022  08a0              LSRS     r0,r4,#2
;;;459      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000024  9003              STR      r0,[sp,#0xc]
000026  2000              MOVS     r0,#0
;;;460      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000028  2180              MOVS     r1,#0x80
00002a  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;461      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002e  0089              LSLS     r1,r1,#2
;;;462      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000030  9106              STR      r1,[sp,#0x18]
000032  0089              LSLS     r1,r1,#2
000034  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;463      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;464      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000038  0089              LSLS     r1,r1,#2
00003a  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;465      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;466      DMA_Init(SD_SDIO_DMA_CHANNEL, &DMA_InitStructure);
00003e  4669              MOV      r1,sp
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       DMA_Init
;;;467    
;;;468      DMA_ITConfig(SD_SDIO_DMA_CHANNEL, DMA_IT_TC, ENABLE);
000046  2201              MOVS     r2,#1
000048  2102              MOVS     r1,#2
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       DMA_ITConfig
;;;469    
;;;470      /*!< SDIO DMA CHANNEL enable */
;;;471      DMA_Cmd(SD_SDIO_DMA_CHANNEL, ENABLE);  
000050  2101              MOVS     r1,#1
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       DMA_Cmd
;;;472    }
000058  b00c              ADD      sp,sp,#0x30
00005a  bd70              POP      {r4-r6,pc}
;;;473    
                          ENDP

                  |L5.92|
                          DCD      0x1000f000
                  |L5.96|
                          DCD      0x40020444
                  |L5.100|
                          DCD      0x40018080

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;376      */
;;;377    void SD_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;378    {
;;;379      GPIO_InitTypeDef  GPIO_InitStructure;
;;;380      
;;;381      /*!< Disable SDIO Clock */
;;;382      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;383      
;;;384      /*!< Set Power State to OFF */
;;;385      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;386    
;;;387      /*!< DeInitializes the SDIO peripheral */
;;;388      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;389      
;;;390      /*!< Disable the SDIO AHB Clock */
;;;391      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6080          MOV      r0,#0x400
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;392    
;;;393      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;394      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00001c  f44f50f8          MOV      r0,#0x1f00
000020  f8ad0000          STRH     r0,[sp,#0]
;;;395      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2404              MOVS     r4,#4
000026  f88d4003          STRB     r4,[sp,#3]
;;;396      GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4804              LDR      r0,|L6.64|
00002e  f7fffffe          BL       GPIO_Init
;;;397    
;;;398      /*!< Configure PD.02 CMD line */
;;;399      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  f8ad4000          STRH     r4,[sp,#0]
;;;400      GPIO_Init(GPIOD, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  4802              LDR      r0,|L6.68|
00003a  f7fffffe          BL       GPIO_Init
;;;401    }
00003e  bd38              POP      {r3-r5,pc}
;;;402    
                          ENDP

                  |L6.64|
                          DCD      0x40011000
                  |L6.68|
                          DCD      0x40011400

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;408      */
;;;409    void SD_LowLevel_Init(void)
000000  b508              PUSH     {r3,lr}
;;;410    {
;;;411      GPIO_InitTypeDef  GPIO_InitStructure;
;;;412    
;;;413      /*!< GPIOC and GPIOD Periph clock enable */
;;;414      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  20b0              MOVS     r0,#0xb0
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;415    
;;;416      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;417      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00000a  f44f50f8          MOV      r0,#0x1f00
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;418      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;419      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000018  2018              MOVS     r0,#0x18
00001a  f88d0003          STRB     r0,[sp,#3]
;;;420      GPIO_Init(GPIOC, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  480e              LDR      r0,|L7.92|
000022  f7fffffe          BL       GPIO_Init
;;;421    
;;;422      /*!< Configure PD.02 CMD line */
;;;423      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000026  2004              MOVS     r0,#4
000028  f8ad0000          STRH     r0,[sp,#0]
;;;424      GPIO_Init(GPIOD, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  480c              LDR      r0,|L7.96|
000030  f7fffffe          BL       GPIO_Init
;;;425    
;;;426      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;427      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000034  f44f6000          MOV      r0,#0x800
000038  f8ad0000          STRH     r0,[sp,#0]
;;;428      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00003c  2048              MOVS     r0,#0x48
00003e  f88d0003          STRB     r0,[sp,#3]
;;;429      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000042  4669              MOV      r1,sp
000044  4807              LDR      r0,|L7.100|
000046  f7fffffe          BL       GPIO_Init
;;;430      
;;;431      /*!< Enable the SDIO AHB Clock */
;;;432      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
00004a  2101              MOVS     r1,#1
00004c  0288              LSLS     r0,r1,#10
00004e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;433    
;;;434      /*!< Enable the DMA2 Clock */
;;;435      RCC_AHBPeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
000052  2101              MOVS     r1,#1
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;436    }
00005a  bd08              POP      {r3,pc}
;;;437    
                          ENDP

                  |L7.92|
                          DCD      0x40011000
                  |L7.96|
                          DCD      0x40011400
                  |L7.100|
                          DCD      0x40011c00

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;336      */
;;;337    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;338    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;339      GPIO_InitTypeDef GPIO_InitStructure;
;;;340    
;;;341      /* Enable GPIO clock */
;;;342      RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
000006  4925              LDR      r1,|L8.156|
000008  4824              LDR      r0,|L8.156|
00000a  3108              ADDS     r1,r1,#8
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  f8511024          LDR      r1,[r1,r4,LSL #2]
000014  4308              ORRS     r0,r0,r1
000016  f0400001          ORR      r0,r0,#1
00001a  2101              MOVS     r1,#1
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;343    
;;;344      /* Enable UART clock */
;;;345      if (COM == COM1)
;;;346      {
;;;347        RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
000020  481e              LDR      r0,|L8.156|
000022  3808              SUBS     r0,r0,#8
000024  b39c              CBZ      r4,|L8.142|
;;;348      }
;;;349      else
;;;350      {
;;;351        RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000026  f8500024          LDR      r0,[r0,r4,LSL #2]
00002a  2101              MOVS     r1,#1
00002c  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L8.48|
;;;352      }
;;;353    
;;;354      /* Configure USART Tx as alternate function push-pull */
;;;355      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000030  2018              MOVS     r0,#0x18
000032  f88d0003          STRB     r0,[sp,#3]
;;;356      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000036  4819              LDR      r0,|L8.156|
;;;357      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;358      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  3818              SUBS     r0,r0,#0x18           ;356
00003c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;356
000040  f8ad0000          STRH     r0,[sp,#0]            ;356
000044  2003              MOVS     r0,#3                 ;357
000046  f88d0002          STRB     r0,[sp,#2]            ;357
00004a  4815              LDR      r0,|L8.160|
00004c  f8500024          LDR      r0,[r0,r4,LSL #2]
000050  f7fffffe          BL       GPIO_Init
;;;359    
;;;360      /* Configure USART Rx as input floating */
;;;361      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000054  2004              MOVS     r0,#4
000056  f88d0003          STRB     r0,[sp,#3]
;;;362      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
00005a  4810              LDR      r0,|L8.156|
;;;363      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
00005c  4669              MOV      r1,sp
00005e  3814              SUBS     r0,r0,#0x14           ;362
000060  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;362
000064  f8ad0000          STRH     r0,[sp,#0]            ;362
000068  480d              LDR      r0,|L8.160|
00006a  3008              ADDS     r0,r0,#8
00006c  f8500024          LDR      r0,[r0,r4,LSL #2]
000070  f7fffffe          BL       GPIO_Init
;;;364    
;;;365      /* USART configuration */
;;;366      USART_Init(COM_USART[COM], USART_InitStruct);
000074  4d0a              LDR      r5,|L8.160|
000076  4631              MOV      r1,r6
000078  3d08              SUBS     r5,r5,#8
00007a  f8550024          LDR      r0,[r5,r4,LSL #2]
00007e  f7fffffe          BL       USART_Init
;;;367        
;;;368      /* Enable USART */
;;;369      USART_Cmd(COM_USART[COM], ENABLE);
000082  f8550024          LDR      r0,[r5,r4,LSL #2]
000086  2101              MOVS     r1,#1
000088  f7fffffe          BL       USART_Cmd
;;;370    }
00008c  bdf8              POP      {r3-r7,pc}
                  |L8.142|
00008e  e7ff              B        |L8.144|
                  |L8.144|
000090  6800              LDR      r0,[r0,#0]            ;347
000092  2101              MOVS     r1,#1                 ;347
000094  f7fffffe          BL       RCC_APB2PeriphClockCmd
000098  e7ca              B        |L8.48|
;;;371    
                          ENDP

00009a  0000              DCW      0x0000
                  |L8.156|
                          DCD      ||.constdata||+0x18
                  |L8.160|
                          DCD      ||.data||+0x8

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;183      */
;;;184    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b538              PUSH     {r3-r5,lr}
;;;185    {
000002  4604              MOV      r4,r0
;;;186      GPIO_InitTypeDef  GPIO_InitStructure;
;;;187      
;;;188      /* Enable the GPIO_LED Clock */
;;;189      RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  480c              LDR      r0,|L9.56|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;190    
;;;191      /* Configure the GPIO_LED pin */
;;;192      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4809              LDR      r0,|L9.56|
;;;193      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;194      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;195    
;;;196      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4669              MOV      r1,sp
000014  3820              SUBS     r0,r0,#0x20           ;192
000016  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;192
00001a  f8ad0000          STRH     r0,[sp,#0]            ;192
00001e  2010              MOVS     r0,#0x10              ;193
000020  f88d0003          STRB     r0,[sp,#3]            ;193
000024  2003              MOVS     r0,#3                 ;194
000026  f88d0002          STRB     r0,[sp,#2]            ;194
00002a  4804              LDR      r0,|L9.60|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;197    }
000034  bd38              POP      {r3-r5,pc}
;;;198    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.constdata||+0x28
                  |L9.60|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;223      */
;;;224    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L10.16|
;;;225    {
;;;226      GPIO_PORT[Led]->BRR = GPIO_PIN[Led];    
000002  4a04              LDR      r2,|L10.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6141              STR      r1,[r0,#0x14]
;;;227    }
00000e  4770              BX       lr
;;;228    
                          ENDP

                  |L10.16|
                          DCD      ||.constdata||+0x8
                  |L10.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;208      */
;;;209    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L11.16|
;;;210    {
;;;211      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];     
000002  4a04              LDR      r2,|L11.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6101              STR      r1,[r0,#0x10]
;;;212    }
00000e  4770              BX       lr
;;;213    
                          ENDP

                  |L11.16|
                          DCD      ||.constdata||+0x8
                  |L11.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;238      */
;;;239    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L12.20|
;;;240    {
;;;241      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  68ca              LDR      r2,[r1,#0xc]
000008  4b03              LDR      r3,|L12.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  60ca              STR      r2,[r1,#0xc]
;;;242    }
000012  4770              BX       lr
;;;243    
                          ENDP

                  |L12.20|
                          DCD      ||.data||+0x18
                  |L12.24|
                          DCD      ||.constdata||+0x8

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;321      */
;;;322    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  4903              LDR      r1,|L13.16|
;;;323    {
;;;324      return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000002  4a04              LDR      r2,|L13.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  f7ffbffe          B.W      GPIO_ReadInputDataBit
;;;325    }
;;;326    
                          ENDP

                  |L13.16|
                          DCD      ||.constdata||+0x38
                  |L13.20|
                          DCD      ||.data||+0x28

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;262      */
;;;263    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b57f              PUSH     {r0-r6,lr}
;;;264    {
000002  4604              MOV      r4,r0
;;;265      GPIO_InitTypeDef GPIO_InitStructure;
;;;266      EXTI_InitTypeDef EXTI_InitStructure;
;;;267      NVIC_InitTypeDef NVIC_InitStructure;
;;;268    
;;;269      /* Enable the BUTTON Clock */
;;;270      RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
000004  4823              LDR      r0,|L14.148|
000006  460d              MOV      r5,r1                 ;264
000008  2101              MOVS     r1,#1
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  f0400001          ORR      r0,r0,#1
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;271    
;;;272      /* Configure Button pin as input floating */
;;;273      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000016  2004              MOVS     r0,#4
000018  f88d000f          STRB     r0,[sp,#0xf]
;;;274      GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00001c  481d              LDR      r0,|L14.148|
;;;275      GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
00001e  a903              ADD      r1,sp,#0xc
000020  3810              SUBS     r0,r0,#0x10           ;274
000022  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;274
000026  f8ad000c          STRH     r0,[sp,#0xc]          ;274
00002a  481b              LDR      r0,|L14.152|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;276    
;;;277    
;;;278      if (Button_Mode == BUTTON_MODE_EXTI)
000034  2d01              CMP      r5,#1
000036  d12c              BNE      |L14.146|
;;;279      {
;;;280        /* Connect Button EXTI Line to Button GPIO Pin */
;;;281        GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000038  4816              LDR      r0,|L14.148|
00003a  3040              ADDS     r0,r0,#0x40
00003c  f8101014          LDRB     r1,[r0,r4,LSL #1]
000040  3810              SUBS     r0,r0,#0x10
000042  f8100014          LDRB     r0,[r0,r4,LSL #1]
000046  f7fffffe          BL       GPIO_EXTILineConfig
;;;282    
;;;283        /* Configure Button EXTI line */
;;;284        EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
00004a  4812              LDR      r0,|L14.148|
00004c  3020              ADDS     r0,r0,#0x20
00004e  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;285        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000052  9000              STR      r0,[sp,#0]
000054  2000              MOVS     r0,#0
000056  f88d0004          STRB     r0,[sp,#4]
;;;286    
;;;287        if(Button != BUTTON_WAKEUP)
00005a  b10c              CBZ      r4,|L14.96|
;;;288        {
;;;289          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00005c  200c              MOVS     r0,#0xc
00005e  e000              B        |L14.98|
                  |L14.96|
;;;290        }
;;;291        else
;;;292        {
;;;293          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000060  2008              MOVS     r0,#8
                  |L14.98|
000062  f88d0005          STRB     r0,[sp,#5]
;;;294        }
;;;295        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000066  2501              MOVS     r5,#1
000068  f88d5006          STRB     r5,[sp,#6]
;;;296        EXTI_Init(&EXTI_InitStructure);
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       EXTI_Init
;;;297    
;;;298        /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;299        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
000072  4808              LDR      r0,|L14.148|
000074  3050              ADDS     r0,r0,#0x50
000076  f8100014          LDRB     r0,[r0,r4,LSL #1]
00007a  f88d0008          STRB     r0,[sp,#8]
;;;300        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
00007e  200f              MOVS     r0,#0xf
000080  f88d0009          STRB     r0,[sp,#9]
;;;301        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
000084  f88d000a          STRB     r0,[sp,#0xa]
;;;302        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000088  f88d500b          STRB     r5,[sp,#0xb]
;;;303    
;;;304        NVIC_Init(&NVIC_InitStructure); 
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       NVIC_Init
                  |L14.146|
;;;305      }
;;;306    }
000092  bd7f              POP      {r0-r6,pc}
;;;307    
                          ENDP

                  |L14.148|
                          DCD      ||.constdata||+0x48
                  |L14.152|
                          DCD      ||.data||+0x28

                          AREA ||i.sFLASH_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_DeInit PROC
;;;523      */
;;;524    void sFLASH_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;525    {
;;;526      GPIO_InitTypeDef GPIO_InitStructure;
;;;527    
;;;528      /*!< Disable the sFLASH_SPI  */
;;;529      SPI_Cmd(sFLASH_SPI, DISABLE);
000002  4c16              LDR      r4,|L15.92|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;530      
;;;531      /*!< DeInitializes the sFLASH_SPI */
;;;532      SPI_I2S_DeInit(sFLASH_SPI);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;533      
;;;534      /*!< sFLASH_SPI Periph clock disable */
;;;535      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;536      
;;;537      /*!< Configure sFLASH_SPI pins: SCK */
;;;538      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
00001a  2020              MOVS     r0,#0x20
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;539      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;540      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000020  4d0f              LDR      r5,|L15.96|
000022  2404              MOVS     r4,#4                 ;539
000024  f88d4003          STRB     r4,[sp,#3]            ;539
000028  4669              MOV      r1,sp
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_Init
;;;541    
;;;542      /*!< Configure sFLASH_SPI pins: MISO */
;;;543      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
000030  2040              MOVS     r0,#0x40
000032  f8ad0000          STRH     r0,[sp,#0]
;;;544      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GPIO_Init
;;;545    
;;;546      /*!< Configure sFLASH_SPI pins: MOSI */
;;;547      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00003e  2080              MOVS     r0,#0x80
000040  f8ad0000          STRH     r0,[sp,#0]
;;;548      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       GPIO_Init
;;;549    
;;;550      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;551      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
00004c  f8ad4000          STRH     r4,[sp,#0]
;;;552      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
000050  4669              MOV      r1,sp
000052  4804              LDR      r0,|L15.100|
000054  f7fffffe          BL       GPIO_Init
;;;553    }
000058  bd38              POP      {r3-r5,pc}
;;;554    
                          ENDP

00005a  0000              DCW      0x0000
                  |L15.92|
                          DCD      0x40013000
                  |L15.96|
                          DCD      0x40010800
                  |L15.100|
                          DCD      0x40010c00

                          AREA ||i.sFLASH_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_Init PROC
;;;559      */
;;;560    void sFLASH_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;561    {
;;;562      GPIO_InitTypeDef GPIO_InitStructure;
;;;563    
;;;564      /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO 
;;;565           and sFLASH_SPI_SCK_GPIO Periph clock enable */
;;;566      RCC_APB2PeriphClockCmd(sFLASH_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
000002  2101              MOVS     r1,#1
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;567                             sFLASH_SPI_SCK_GPIO_CLK, ENABLE);
;;;568    
;;;569      /*!< sFLASH_SPI Periph clock enable */
;;;570      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0308              LSLS     r0,r1,#12
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;571      
;;;572      /*!< Configure sFLASH_SPI pins: SCK */
;;;573      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
000012  2020              MOVS     r0,#0x20
000014  f8ad0000          STRH     r0,[sp,#0]
;;;574      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;575      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
;;;576      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000020  4d10              LDR      r5,|L16.100|
000022  f88d0003          STRB     r0,[sp,#3]            ;575
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;577    
;;;578      /*!< Configure sFLASH_SPI pins: MOSI */
;;;579      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0000          STRH     r0,[sp,#0]
;;;580      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_Init
;;;581    
;;;582      /*!< Configure sFLASH_SPI pins: MISO */
;;;583      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
00003c  2040              MOVS     r0,#0x40
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;584      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
000042  2404              MOVS     r4,#4
000044  f88d4003          STRB     r4,[sp,#3]
;;;585      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000048  4669              MOV      r1,sp
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       GPIO_Init
;;;586      
;;;587      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;588      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
000050  f8ad4000          STRH     r4,[sp,#0]
;;;589      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000054  2010              MOVS     r0,#0x10
000056  f88d0003          STRB     r0,[sp,#3]
;;;590      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4802              LDR      r0,|L16.104|
00005e  f7fffffe          BL       GPIO_Init
;;;591    }
000062  bd38              POP      {r3-r5,pc}
;;;592    
                          ENDP

                  |L16.100|
                          DCD      0x40010800
                  |L16.104|
                          DCD      0x40010c00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_PIN
000000  02000004          DCW      0x0200,0x0004
                  COM_RX_PIN
000004  04000008          DCW      0x0400,0x0008
                  GPIO_PIN
000008  00400080          DCW      0x0040,0x0080
00000c  01000200          DCW      0x0100,0x0200
                  COM_USART_CLK
                          DCD      0x00004000
                          DCD      0x00020000
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                  GPIO_CLK
                          DCD      0x00000080
                          DCD      0x00000080
                          DCD      0x00000080
                          DCD      0x00000080
                  BUTTON_PIN
000038  00012000          DCW      0x0001,0x2000
00003c  01002000          DCW      0x0100,0x2000
000040  40008000          DCW      0x4000,0x8000
000044  00080080          DCW      0x0008,0x0080
                  BUTTON_CLK
                          DCD      0x00000004
                          DCD      0x00000010
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000020
                          DCD      0x00000100
                  BUTTON_EXTI_LINE
000068  00012000          DCW      0x0001,0x2000
00006c  01002000          DCW      0x0100,0x2000
000070  40008000          DCW      0x4000,0x8000
000074  00080080          DCW      0x0008,0x0080
                  BUTTON_PORT_SOURCE
000078  00000002          DCW      0x0000,0x0002
00007c  00060006          DCW      0x0006,0x0006
000080  00060006          DCW      0x0006,0x0006
000084  00030006          DCW      0x0003,0x0006
                  BUTTON_PIN_SOURCE
000088  0000000d          DCW      0x0000,0x000d
00008c  0008000d          DCW      0x0008,0x000d
000090  000e000f          DCW      0x000e,0x000f
000094  00030007          DCW      0x0003,0x0007
                  BUTTON_IRQn
000098  00060028          DCW      0x0006,0x0028
00009c  00170028          DCW      0x0017,0x0028
0000a0  00280028          DCW      0x0028,0x0028
0000a4  00090017          DCW      0x0009,0x0017

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40013800
                          DCD      0x40004400
                  COM_TX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                  COM_RX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                  GPIO_PORT
                          DCD      0x40011c00
                          DCD      0x40011c00
                          DCD      0x40011c00
                          DCD      0x40011c00
                  BUTTON_PORT
                          DCD      0x40010800
                          DCD      0x40011000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40011400
                          DCD      0x40012000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM3210E_EVAL\\stm3210e_eval.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm3210e_eval_c_c84236cb____REV16|
#line 129 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm3210e_eval_c_c84236cb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm3210e_eval_c_c84236cb____REVSH|
#line 144
|__asm___15_stm3210e_eval_c_c84236cb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
